//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Ufba.Ev
{
	/// <summary>
	/// DomainRelationship EvModelHasElements
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.Ev.EvModelHasElements.DisplayName", typeof(global::Ufba.Ev.EvDomainModel), "Ufba.Ev.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.Ev.EvModelHasElements.Description", typeof(global::Ufba.Ev.EvDomainModel), "Ufba.Ev.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.Ev.EvDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4f4a2f72-45fd-4cae-99ba-9e9fdeca8713")]
	public partial class EvModelHasElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EvModelHasElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4f4a2f72, 0x45fd, 0x4cae, 0x99, 0xba, 0x9e, 0x9f, 0xde, 0xca, 0x87, 0x13);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EvModelHasElements link in the same Partition as the given EvModel
		/// </summary>
		/// <param name="source">EvModel to use as the source of the relationship.</param>
		/// <param name="target">Option to use as the target of the relationship.</param>
		public EvModelHasElements(EvModel source, Option target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EvModelHasElements.EvModelDomainRoleId, source), new DslModeling::RoleAssignment(EvModelHasElements.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EvModelHasElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EvModelHasElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EvModelHasElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EvModelHasElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EvModel domain role code
		
		/// <summary>
		/// EvModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid EvModelDomainRoleId = new global::System.Guid(0xe35a2fd8, 0xa311, 0x4726, 0x86, 0xd1, 0x7d, 0x79, 0x47, 0x20, 0xa1, 0x0f);
		
		/// <summary>
		/// DomainRole EvModel
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.Ev.EvModelHasElements/EvModel.DisplayName", typeof(global::Ufba.Ev.EvDomainModel), "Ufba.Ev.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.Ev.EvModelHasElements/EvModel.Description", typeof(global::Ufba.Ev.EvDomainModel), "Ufba.Ev.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="Ufba.Ev.EvModelHasElements/EvModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e35a2fd8-a311-4726-86d1-7d794720a10f")]
		public virtual EvModel EvModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EvModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, EvModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EvModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EvModel of a Option
		/// <summary>
		/// Gets EvModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EvModel GetEvModel(Option element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as EvModel;
		}
		
		/// <summary>
		/// Sets EvModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEvModel(Option element, EvModel newEvModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newEvModel);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0xd1ed1b5a, 0xab31, 0x445b, 0xba, 0x89, 0x74, 0x8c, 0x51, 0xaf, 0xd8, 0xf3);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.Ev.EvModelHasElements/Element.DisplayName", typeof(global::Ufba.Ev.EvDomainModel), "Ufba.Ev.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.Ev.EvModelHasElements/Element.Description", typeof(global::Ufba.Ev.EvDomainModel), "Ufba.Ev.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EvModel", PropertyDisplayNameKey="Ufba.Ev.EvModelHasElements/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d1ed1b5a-ab31-445b-ba89-748c51afd8f3")]
		public virtual Option Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Option)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a EvModel
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Option> GetElements(EvModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Option>, Option>(element, EvModelDomainRoleId);
		}
		#endregion
		#region EvModel link accessor
		/// <summary>
		/// Get the list of EvModelHasElements links to a EvModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.Ev.EvModelHasElements> GetLinksToElements ( global::Ufba.Ev.EvModel evModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.Ev.EvModelHasElements>(evModelInstance, global::Ufba.Ev.EvModelHasElements.EvModelDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the EvModelHasElements link to a Option.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.Ev.EvModelHasElements GetLinkToEvModel (global::Ufba.Ev.Option elementInstance)
		{
			global::System.Collections.Generic.IList<global::Ufba.Ev.EvModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.Ev.EvModelHasElements>(elementInstance, global::Ufba.Ev.EvModelHasElements.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EvModelHasElements instance accessors
		
		/// <summary>
		/// Get any EvModelHasElements links between a given EvModel and a Option.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.Ev.EvModelHasElements> GetLinks( global::Ufba.Ev.EvModel source, global::Ufba.Ev.Option target )
		{
			global::System.Collections.Generic.List<global::Ufba.Ev.EvModelHasElements> outLinks = new global::System.Collections.Generic.List<global::Ufba.Ev.EvModelHasElements>();
			global::System.Collections.Generic.IList<global::Ufba.Ev.EvModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.Ev.EvModelHasElements>(source, global::Ufba.Ev.EvModelHasElements.EvModelDomainRoleId);
			foreach ( global::Ufba.Ev.EvModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EvModelHasElements link between a given EvModeland a Option.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.Ev.EvModelHasElements GetLink( global::Ufba.Ev.EvModel source, global::Ufba.Ev.Option target )
		{
			global::System.Collections.Generic.IList<global::Ufba.Ev.EvModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.Ev.EvModelHasElements>(source, global::Ufba.Ev.EvModelHasElements.EvModelDomainRoleId);
			foreach ( global::Ufba.Ev.EvModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Ufba.Ev
{
	/// <summary>
	/// DomainRelationship OptionHasFunctions
	/// Description for Ufba.Ev.OptionHasFunctions
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.Ev.OptionHasFunctions.DisplayName", typeof(global::Ufba.Ev.EvDomainModel), "Ufba.Ev.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.Ev.OptionHasFunctions.Description", typeof(global::Ufba.Ev.EvDomainModel), "Ufba.Ev.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.Ev.EvDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("7c7047b7-f435-4984-b739-c6603a21f7c1")]
	public partial class OptionHasFunctions : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// OptionHasFunctions domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7c7047b7, 0xf435, 0x4984, 0xb7, 0x39, 0xc6, 0x60, 0x3a, 0x21, 0xf7, 0xc1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a OptionHasFunctions link in the same Partition as the given Option
		/// </summary>
		/// <param name="source">Option to use as the source of the relationship.</param>
		/// <param name="target">Function to use as the target of the relationship.</param>
		public OptionHasFunctions(Option source, Function target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(OptionHasFunctions.OptionDomainRoleId, source), new DslModeling::RoleAssignment(OptionHasFunctions.FunctionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OptionHasFunctions(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OptionHasFunctions(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OptionHasFunctions(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OptionHasFunctions(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Option domain role code
		
		/// <summary>
		/// Option domain role Id.
		/// </summary>
		public static readonly global::System.Guid OptionDomainRoleId = new global::System.Guid(0x0610bcea, 0xb612, 0x415d, 0x8c, 0xd8, 0xe0, 0x8b, 0x7f, 0xaf, 0x53, 0x16);
		
		/// <summary>
		/// DomainRole Option
		/// Description for Ufba.Ev.OptionHasFunctions.Option
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.Ev.OptionHasFunctions/Option.DisplayName", typeof(global::Ufba.Ev.EvDomainModel), "Ufba.Ev.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.Ev.OptionHasFunctions/Option.Description", typeof(global::Ufba.Ev.EvDomainModel), "Ufba.Ev.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Functions", PropertyDisplayNameKey="Ufba.Ev.OptionHasFunctions/Option.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0610bcea-b612-415d-8cd8-e08b7faf5316")]
		public virtual Option Option
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Option)DslModeling::DomainRoleInfo.GetRolePlayer(this, OptionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OptionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Option of a Function
		/// <summary>
		/// Gets Option.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Option GetOption(Function element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, FunctionDomainRoleId) as Option;
		}
		
		/// <summary>
		/// Sets Option.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetOption(Function element, Option newOption)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, FunctionDomainRoleId, newOption);
		}
		#endregion
		#region Function domain role code
		
		/// <summary>
		/// Function domain role Id.
		/// </summary>
		public static readonly global::System.Guid FunctionDomainRoleId = new global::System.Guid(0x7c2c9e35, 0x6364, 0x4e00, 0xbb, 0x6a, 0xbb, 0x62, 0xf0, 0x93, 0x06, 0x66);
		
		/// <summary>
		/// DomainRole Function
		/// Description for Ufba.Ev.OptionHasFunctions.Function
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.Ev.OptionHasFunctions/Function.DisplayName", typeof(global::Ufba.Ev.EvDomainModel), "Ufba.Ev.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.Ev.OptionHasFunctions/Function.Description", typeof(global::Ufba.Ev.EvDomainModel), "Ufba.Ev.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Option", PropertyDisplayNameKey="Ufba.Ev.OptionHasFunctions/Function.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("7c2c9e35-6364-4e00-bb6a-bb62f0930666")]
		public virtual Function Function
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Function)DslModeling::DomainRoleInfo.GetRolePlayer(this, FunctionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FunctionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Functions of a Option
		/// <summary>
		/// Gets a list of Functions.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Function> GetFunctions(Option element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Function>, Function>(element, OptionDomainRoleId);
		}
		#endregion
		#region Var domain property code
		
		/// <summary>
		/// Var domain property Id.
		/// </summary>
		public static readonly global::System.Guid VarDomainPropertyId = new global::System.Guid(0x5ac66e02, 0xfcce, 0x4a77, 0xa9, 0x29, 0x71, 0xcc, 0x68, 0xea, 0x7a, 0xc1);
		
		/// <summary>
		/// Storage for Var
		/// </summary>
		private global::System.String varPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Var domain property.
		/// Description for Ufba.Ev.OptionHasFunctions.Var
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.Ev.OptionHasFunctions/Var.DisplayName", typeof(global::Ufba.Ev.EvDomainModel), "Ufba.Ev.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.Ev.OptionHasFunctions/Var.Description", typeof(global::Ufba.Ev.EvDomainModel), "Ufba.Ev.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("5ac66e02-fcce-4a77-a929-71cc68ea7ac1")]
		public global::System.String Var
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return varPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				VarPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the OptionHasFunctions.Var domain property.
		/// </summary>
		internal sealed partial class VarPropertyHandler : DslModeling::DomainPropertyValueHandler<OptionHasFunctions, global::System.String>
		{
			private VarPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the OptionHasFunctions.Var domain property value handler.
			/// </summary>
			public static readonly VarPropertyHandler Instance = new VarPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the OptionHasFunctions.Var domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return VarDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(OptionHasFunctions element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.varPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(OptionHasFunctions element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.varPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Option link accessor
		/// <summary>
		/// Get the list of OptionHasFunctions links to a Option.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.Ev.OptionHasFunctions> GetLinksToFunctions ( global::Ufba.Ev.Option optionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.Ev.OptionHasFunctions>(optionInstance, global::Ufba.Ev.OptionHasFunctions.OptionDomainRoleId);
		}
		#endregion
		#region Function link accessor
		/// <summary>
		/// Get the OptionHasFunctions link to a Function.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.Ev.OptionHasFunctions GetLinkToOption (global::Ufba.Ev.Function functionInstance)
		{
			global::System.Collections.Generic.IList<global::Ufba.Ev.OptionHasFunctions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.Ev.OptionHasFunctions>(functionInstance, global::Ufba.Ev.OptionHasFunctions.FunctionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Function not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region OptionHasFunctions instance accessors
		
		/// <summary>
		/// Get any OptionHasFunctions links between a given Option and a Function.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.Ev.OptionHasFunctions> GetLinks( global::Ufba.Ev.Option source, global::Ufba.Ev.Function target )
		{
			global::System.Collections.Generic.List<global::Ufba.Ev.OptionHasFunctions> outLinks = new global::System.Collections.Generic.List<global::Ufba.Ev.OptionHasFunctions>();
			global::System.Collections.Generic.IList<global::Ufba.Ev.OptionHasFunctions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.Ev.OptionHasFunctions>(source, global::Ufba.Ev.OptionHasFunctions.OptionDomainRoleId);
			foreach ( global::Ufba.Ev.OptionHasFunctions link in links )
			{
				if ( target.Equals(link.Function) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one OptionHasFunctions link between a given Optionand a Function.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.Ev.OptionHasFunctions GetLink( global::Ufba.Ev.Option source, global::Ufba.Ev.Function target )
		{
			global::System.Collections.Generic.IList<global::Ufba.Ev.OptionHasFunctions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.Ev.OptionHasFunctions>(source, global::Ufba.Ev.OptionHasFunctions.OptionDomainRoleId);
			foreach ( global::Ufba.Ev.OptionHasFunctions link in links )
			{
				if ( target.Equals(link.Function) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Ufba.Ev
{
	/// <summary>
	/// DomainRelationship OptionHasProperties
	/// Description for Ufba.Ev.OptionHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.Ev.OptionHasProperties.DisplayName", typeof(global::Ufba.Ev.EvDomainModel), "Ufba.Ev.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.Ev.OptionHasProperties.Description", typeof(global::Ufba.Ev.EvDomainModel), "Ufba.Ev.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.Ev.EvDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("b2482601-abc8-4721-9401-838659fdefab")]
	public partial class OptionHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// OptionHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb2482601, 0xabc8, 0x4721, 0x94, 0x01, 0x83, 0x86, 0x59, 0xfd, 0xef, 0xab);
	
				
		/// <summary>
		/// Constructor
		/// Creates a OptionHasProperties link in the same Partition as the given Option
		/// </summary>
		/// <param name="source">Option to use as the source of the relationship.</param>
		/// <param name="target">Property to use as the target of the relationship.</param>
		public OptionHasProperties(Option source, Property target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(OptionHasProperties.OptionDomainRoleId, source), new DslModeling::RoleAssignment(OptionHasProperties.PropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OptionHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OptionHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OptionHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OptionHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Option domain role code
		
		/// <summary>
		/// Option domain role Id.
		/// </summary>
		public static readonly global::System.Guid OptionDomainRoleId = new global::System.Guid(0xc124a9c1, 0x5a72, 0x41a9, 0xbe, 0x5e, 0x43, 0xf7, 0xea, 0xc3, 0x0b, 0x47);
		
		/// <summary>
		/// DomainRole Option
		/// Description for Ufba.Ev.OptionHasProperties.Option
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.Ev.OptionHasProperties/Option.DisplayName", typeof(global::Ufba.Ev.EvDomainModel), "Ufba.Ev.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.Ev.OptionHasProperties/Option.Description", typeof(global::Ufba.Ev.EvDomainModel), "Ufba.Ev.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="Ufba.Ev.OptionHasProperties/Option.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c124a9c1-5a72-41a9-be5e-43f7eac30b47")]
		public virtual Option Option
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Option)DslModeling::DomainRoleInfo.GetRolePlayer(this, OptionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OptionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Option of a Property
		/// <summary>
		/// Gets Option.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Option GetOption(Property element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PropertyDomainRoleId) as Option;
		}
		
		/// <summary>
		/// Sets Option.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetOption(Property element, Option newOption)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PropertyDomainRoleId, newOption);
		}
		#endregion
		#region Property domain role code
		
		/// <summary>
		/// Property domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyDomainRoleId = new global::System.Guid(0x8723d0d8, 0x3352, 0x4902, 0xbb, 0x66, 0xf5, 0x1f, 0x08, 0x2d, 0x41, 0x8f);
		
		/// <summary>
		/// DomainRole Property
		/// Description for Ufba.Ev.OptionHasProperties.Property
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.Ev.OptionHasProperties/Property.DisplayName", typeof(global::Ufba.Ev.EvDomainModel), "Ufba.Ev.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.Ev.OptionHasProperties/Property.Description", typeof(global::Ufba.Ev.EvDomainModel), "Ufba.Ev.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Option", PropertyDisplayNameKey="Ufba.Ev.OptionHasProperties/Property.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8723d0d8-3352-4902-bb66-f51f082d418f")]
		public virtual Property Property
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Property)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a Option
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Property> GetProperties(Option element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(element, OptionDomainRoleId);
		}
		#endregion
		#region Option link accessor
		/// <summary>
		/// Get the list of OptionHasProperties links to a Option.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.Ev.OptionHasProperties> GetLinksToProperties ( global::Ufba.Ev.Option optionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.Ev.OptionHasProperties>(optionInstance, global::Ufba.Ev.OptionHasProperties.OptionDomainRoleId);
		}
		#endregion
		#region Property link accessor
		/// <summary>
		/// Get the OptionHasProperties link to a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.Ev.OptionHasProperties GetLinkToOption (global::Ufba.Ev.Property propertyInstance)
		{
			global::System.Collections.Generic.IList<global::Ufba.Ev.OptionHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.Ev.OptionHasProperties>(propertyInstance, global::Ufba.Ev.OptionHasProperties.PropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Property not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region OptionHasProperties instance accessors
		
		/// <summary>
		/// Get any OptionHasProperties links between a given Option and a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.Ev.OptionHasProperties> GetLinks( global::Ufba.Ev.Option source, global::Ufba.Ev.Property target )
		{
			global::System.Collections.Generic.List<global::Ufba.Ev.OptionHasProperties> outLinks = new global::System.Collections.Generic.List<global::Ufba.Ev.OptionHasProperties>();
			global::System.Collections.Generic.IList<global::Ufba.Ev.OptionHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.Ev.OptionHasProperties>(source, global::Ufba.Ev.OptionHasProperties.OptionDomainRoleId);
			foreach ( global::Ufba.Ev.OptionHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one OptionHasProperties link between a given Optionand a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.Ev.OptionHasProperties GetLink( global::Ufba.Ev.Option source, global::Ufba.Ev.Property target )
		{
			global::System.Collections.Generic.IList<global::Ufba.Ev.OptionHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.Ev.OptionHasProperties>(source, global::Ufba.Ev.OptionHasProperties.OptionDomainRoleId);
			foreach ( global::Ufba.Ev.OptionHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Ufba.Ev
{
	/// <summary>
	/// DomainRelationship OptionHasTypes
	/// Description for Ufba.Ev.OptionHasTypes
	/// </summary>
	[DslDesign::DisplayNameResource("Ufba.Ev.OptionHasTypes.DisplayName", typeof(global::Ufba.Ev.EvDomainModel), "Ufba.Ev.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Ufba.Ev.OptionHasTypes.Description", typeof(global::Ufba.Ev.EvDomainModel), "Ufba.Ev.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Ufba.Ev.EvDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f378e9b2-9af7-454f-8344-2f01eede5025")]
	public partial class OptionHasTypes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// OptionHasTypes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf378e9b2, 0x9af7, 0x454f, 0x83, 0x44, 0x2f, 0x01, 0xee, 0xde, 0x50, 0x25);
	
				
		/// <summary>
		/// Constructor
		/// Creates a OptionHasTypes link in the same Partition as the given Option
		/// </summary>
		/// <param name="source">Option to use as the source of the relationship.</param>
		/// <param name="target">Type to use as the target of the relationship.</param>
		public OptionHasTypes(Option source, Type target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(OptionHasTypes.OptionDomainRoleId, source), new DslModeling::RoleAssignment(OptionHasTypes.TypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OptionHasTypes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OptionHasTypes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public OptionHasTypes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public OptionHasTypes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Option domain role code
		
		/// <summary>
		/// Option domain role Id.
		/// </summary>
		public static readonly global::System.Guid OptionDomainRoleId = new global::System.Guid(0x2badeb65, 0x5ed6, 0x4030, 0xbc, 0xe6, 0x7b, 0xd5, 0xbc, 0x2e, 0xde, 0x94);
		
		/// <summary>
		/// DomainRole Option
		/// Description for Ufba.Ev.OptionHasTypes.Option
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.Ev.OptionHasTypes/Option.DisplayName", typeof(global::Ufba.Ev.EvDomainModel), "Ufba.Ev.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.Ev.OptionHasTypes/Option.Description", typeof(global::Ufba.Ev.EvDomainModel), "Ufba.Ev.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Types", PropertyDisplayNameKey="Ufba.Ev.OptionHasTypes/Option.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2badeb65-5ed6-4030-bce6-7bd5bc2ede94")]
		public virtual Option Option
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Option)DslModeling::DomainRoleInfo.GetRolePlayer(this, OptionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OptionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Option of a Type
		/// <summary>
		/// Gets Option.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Option GetOption(Type element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TypeDomainRoleId) as Option;
		}
		
		/// <summary>
		/// Sets Option.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetOption(Type element, Option newOption)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TypeDomainRoleId, newOption);
		}
		#endregion
		#region Type domain role code
		
		/// <summary>
		/// Type domain role Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainRoleId = new global::System.Guid(0x365a3858, 0x8efb, 0x4194, 0xac, 0x12, 0x16, 0x10, 0xc7, 0xa1, 0x70, 0x36);
		
		/// <summary>
		/// DomainRole Type
		/// Description for Ufba.Ev.OptionHasTypes.Type
		/// </summary>
		[DslDesign::DisplayNameResource("Ufba.Ev.OptionHasTypes/Type.DisplayName", typeof(global::Ufba.Ev.EvDomainModel), "Ufba.Ev.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Ufba.Ev.OptionHasTypes/Type.Description", typeof(global::Ufba.Ev.EvDomainModel), "Ufba.Ev.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Option", PropertyDisplayNameKey="Ufba.Ev.OptionHasTypes/Type.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("365a3858-8efb-4194-ac12-1610c7a17036")]
		public virtual Type Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Type)DslModeling::DomainRoleInfo.GetRolePlayer(this, TypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Types of a Option
		/// <summary>
		/// Gets a list of Types.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Type> GetTypes(Option element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Type>, Type>(element, OptionDomainRoleId);
		}
		#endregion
		#region Option link accessor
		/// <summary>
		/// Get the list of OptionHasTypes links to a Option.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.Ev.OptionHasTypes> GetLinksToTypes ( global::Ufba.Ev.Option optionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.Ev.OptionHasTypes>(optionInstance, global::Ufba.Ev.OptionHasTypes.OptionDomainRoleId);
		}
		#endregion
		#region Type link accessor
		/// <summary>
		/// Get the OptionHasTypes link to a Type.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.Ev.OptionHasTypes GetLinkToOption (global::Ufba.Ev.Type typeInstance)
		{
			global::System.Collections.Generic.IList<global::Ufba.Ev.OptionHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.Ev.OptionHasTypes>(typeInstance, global::Ufba.Ev.OptionHasTypes.TypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Type not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region OptionHasTypes instance accessors
		
		/// <summary>
		/// Get any OptionHasTypes links between a given Option and a Type.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Ufba.Ev.OptionHasTypes> GetLinks( global::Ufba.Ev.Option source, global::Ufba.Ev.Type target )
		{
			global::System.Collections.Generic.List<global::Ufba.Ev.OptionHasTypes> outLinks = new global::System.Collections.Generic.List<global::Ufba.Ev.OptionHasTypes>();
			global::System.Collections.Generic.IList<global::Ufba.Ev.OptionHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.Ev.OptionHasTypes>(source, global::Ufba.Ev.OptionHasTypes.OptionDomainRoleId);
			foreach ( global::Ufba.Ev.OptionHasTypes link in links )
			{
				if ( target.Equals(link.Type) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one OptionHasTypes link between a given Optionand a Type.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Ufba.Ev.OptionHasTypes GetLink( global::Ufba.Ev.Option source, global::Ufba.Ev.Type target )
		{
			global::System.Collections.Generic.IList<global::Ufba.Ev.OptionHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Ufba.Ev.OptionHasTypes>(source, global::Ufba.Ev.OptionHasTypes.OptionDomainRoleId);
			foreach ( global::Ufba.Ev.OptionHasTypes link in links )
			{
				if ( target.Equals(link.Type) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
